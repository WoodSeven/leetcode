class Solution {
public:
    void sortColors(int A[], int n) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        if(A == NULL || n <= 0)
            return ;
        int red_count = 0;
        int white_count = 0;
        int blue_count = 0;
        for(int i = 0;i < n;i++)
        {
            if(A[i] == 0)
                ++red_count;
            else if(A[i] == 1)
                ++white_count;
            else if(A[i] == 2)
                ++blue_count;
            else
                return;
        }
        int red_index = 0;
        int white_index = red_count;
        int blue_index = red_count + white_count;
        while(red_index < red_count || white_index < red_count + white_count || blue_index < n)
        {
            while(A[red_index] == 0 && red_index < red_count)
                red_index++;
            while(A[white_index] == 1 &&  white_index < red_count + white_count)
                white_index++;
            while(A[blue_index] == 2 && blue_index < n)
                blue_index++;
            if(A[red_index] == 1 && red_index < red_count)
            {
                swap(A[red_index],A[white_index]);
                white_index++;
            }
            if(A[red_index] == 2 && red_index < red_count)
            {
                swap(A[red_index],A[blue_index]);
                blue_index++;
            }
            if(A[white_index] == 0 && white_index < red_count + white_count)
            {
                swap(A[white_index],A[red_index]);
                red_index++;
            }
            if(A[white_index] == 2 && white_index < red_count + white_count)
            {
                swap(A[white_index],A[blue_index]);
                blue_index++;
            }
            if(A[blue_index] == 0 &&  blue_index < n)
            {
                swap(A[red_index],A[blue_index]);
                red_index++;
            }
            if(A[blue_index] == 1 &&  blue_index < n)
            {
                swap(A[white_index],A[blue_index]);
                white_index++;
            }
        }
    }
};
