/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
bool pcmp(const Interval& a,const Interval& b)
{
    return a.start < b.start;
}
class Solution {
public:
    vector<Interval> merge(vector<Interval> &intervals) {
        vector<Interval>ret;
        int len = intervals.size();
        if(len == 0)return ret;
        sort(intervals.begin(),intervals.end(),pcmp);
        int start = 0,end = intervals[0].end;
        for(int i = 0;i < len;i++)
        {
            if(i+1 < len && end >= intervals[i+1].start)
            {
                end = max(end,intervals[i+1].end);
                continue;
            }
            if(i == len-1 || end < intervals[i+1].start)
            {
                ret.push_back(*(new Interval(intervals[start].start,end)));
                start = i+1;
                end = intervals[i+1].end;
            }
        }
        return ret;
    }
};
