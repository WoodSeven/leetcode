class Solution {
public:
    int getsecond(int A[],int n,int target)
    {
        int start = 0,end = n-1;
        while(start <= end)
        {
            int mid = (start + end)>>1;
            if(A[mid] < target)start = mid+1;
            else if(A[mid] > target)end = mid - 1;
            else
            {
                if(mid == n-1 || A[mid+1] != target)return mid;
                else start = mid + 1;
            }
        }
        return -1;
    }
    int getfirst(int A[],int n,int target)
    {
        int start = 0,end = n-1;
        while(start <= end)
        {
            int mid = (start + end)>>1;
            if(A[mid] < target)start = mid+1;
            else if(A[mid] > target)end = mid - 1;
            else
            {
                if(mid == 0 || A[mid-1] != target)return mid;
                else end = mid - 1;
            }
        }
        return -1;
    }
    vector<int> searchRange(int A[], int n, int target) {
        vector<int>ret;
        if(!A || !n)return ret;
        int first = getfirst(A,n,target);
        int second = getsecond(A,n,target);
        ret.push_back(first);
        ret.push_back(second);
        return ret;
    }
};
