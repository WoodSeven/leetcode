/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head,ListNode* tail)
    {
        if(head == tail)return head;
        reverse(head ->next,tail) ->next = head;
        return head;//note that here is head,the last node of this reversed singly list
    }
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(head == NULL || m >= n || n <= 0 || m<= 0)return head;
        ListNode* dummy = new ListNode(0),*pre = dummy,*tail = dummy;
        dummy ->next = head;
        for(int i = 0;i < n;i++)
        {
            if(i < m - 1)pre = pre ->next;
            tail = tail ->next;
        }
        ListNode* after = tail ->next;
        reverse(pre ->next,tail) ->next = after;
        pre ->next = tail;
        return dummy ->next;
    }
};
